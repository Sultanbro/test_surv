<?phpnamespace App\Service\CourseV2;use App\DTO\CoursesV2\CourseFilterPropsDto;use App\DTO\CoursesV2\CoursePropsDto;use App\Models\CourseItemV2;use App\Models\CourseV2;use Illuminate\Http\Request;class CourseV2Service{    public function filter(CourseFilterPropsDto $dto)    {        $query = CourseV2::query();        if ($dto->targets != []) {            //        }        return $query->get();    }    public function create(CoursePropsDto $dto)    {        $course = CourseV2::query()->create([            'name' => $dto->name,            'short' => $dto->short,            'desc' => $dto->desc,            'icon' => $dto->icon,            'background' => $dto->background,            'elements' => $dto->elements,            'type' => $dto->type,            'targets' => $dto->targets,            'passing_score' => $dto->passing_score,            'attempts' => $dto->attempts,            'mix_questions' => $dto->mix_questions,            'show_answers' => $dto->show_answers,            'start' => $dto->start,            'stop' => $dto->stop,            'curator_id' => $dto->curator_id,            'curator_group_id' => $dto->curator_group_id,            'curator_position_id' => $dto->curator_position_id,            'notifications' => $dto->notifications,            'award_id' => $dto->award_id,            'show_as_finished' => $dto->show_as_finished,            'bonus' => $dto->bonus,            'for_sale' => $dto->bonus,            'cat_id' => $dto->cat_id,            'author' => $dto->author,            'slides' => $dto->slides,        ]);        // elements of course        $elements = [];        $stages = 0;        $bonuses = 0;        $this->saveCourseItems($course->id, $dto->elements);        $elements = collect($elements);        $ids = [];        foreach ($request->course['items'] as $index => $item) {            if ($elements->where('item_id', $item['item_id'])->where('item_model', $item['item_model'])->first() == null) {                array_push($ids, $item['id']);            }        }        // delete        CourseItem::whereIn('id', $ids)->where('course_id', $request->course['id'])->delete();        // who starts the course        CourseModel::where('course_id', $course->id)->delete();        // if there one badge with 'ALL' name        if (count($request->course['targets']) == 1 && $request->course['targets'][0]['type'] == 0) {            CourseModel::create([                'course_id' => $course->id,                'item_id' => 0,                'item_model' => 0,            ]);        } else {            // no badge            foreach ($request->course['targets'] as $index => $target) {                if ($target['type'] == 1) $model = 'App\\User';                if ($target['type'] == 2) $model = 'App\\ProfileGroup';                if ($target['type'] == 3) $model = 'App\\Position';                CourseModel::create([                    'course_id' => $course->id,                    'item_id' => $target['id'],                    'item_model' => $model,                ]);            }        }        // save course        $course->stages = $stages;        $course->points = $bonuses;        $course->save();        return $course;    }    public function saveCourseItems($courseId, $items): array    {        $elements = [];        foreach ($items as $index => $item) {            if (!in_array($item['type'], CourseItemV2::ITEM_TYPES)) continue;            if ($item['type'] == 1) $model = 'App\\Models\\Books\\Book';            elseif ($item['type'] == 2) $model = 'App\\Models\\Videos\\VideoPlaylist';            elseif ($item['type'] == 3) $model = 'App\\KnowBase';            elseif ($item['type'] == 4) $model = 'App\\iSpring';            $elements[] = [                'item_id' => $item['id'],                'item_type' => $model,            ];            $ci = CourseItemV2::query()                ->where('item_type', $model)                ->where('course_id', $courseId)                ->where('item_id', $item['id'])                ->first();            $arr = [                'course_id' => $courseId,                'item_id' => $item['id'],                'item_model' => $model,                'order' => $index++,                'title' => $item['name'],            ];            if ($ci) {                $ci->update($arr);            } else {                $ci = CourseItemV2::query()->create($arr);            }            $stages += $ci->countItems();            $bonuses += $ci->countBonuses();        }        return $elements;    }}