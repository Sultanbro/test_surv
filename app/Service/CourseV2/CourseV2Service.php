<?phpnamespace App\Service\CourseV2;use App\Models\CourseV2;use App\Models\CourseItemV2;use App\Models\CourseTargetV2;use App\DTO\CoursesV2\CoursePropsDto;use App\DTO\CoursesV2\CourseFilterPropsDto;use App\Repositories\CoursesV2\CourseV2Repository;use App\DTO\CoursesV2\AssignedCourseFilterPropsDto;use App\Repositories\CoursesV2\CentralCourseRepository;use Illuminate\Contracts\Pagination\LengthAwarePaginator;class CourseV2Service{    public function __construct(        public CourseV2Repository $repository,        public CentralCourseRepository $centralCourseRepository    )    {    }    public function getAll(CourseFilterPropsDto $dto): LengthAwarePaginator    {        return $this->repository->filter($dto);    }    public function create(CoursePropsDto $dto): CourseV2    {        $centralCourse = $this->centralCourseRepository->createCourse($dto);        /** @var CourseV2 $course */        $course = $this->repository->createCourse($dto, $centralCourse->id);        $this->saveCourseItems($course->id, $dto->elements);        $this->saveCourseTargets($course->id, $dto->targets);        return $course;    }    public function getOne(int $courseId)    {        $course = CourseV2::query()->findOrFail($courseId);        $course->targets = $course->targets();        return $course;    }    public function getAssigned(AssignedCourseFilterPropsDto $dto): LengthAwarePaginator    {        return $this->repository->filterAssigned($dto);    }    public function saveCourseItems($courseId, $items): array    {        $elements = [];        foreach ($items as $item) {            if (!in_array($item['item_type'], CourseItemV2::ITEM_TYPES)) continue;            if ($item['item_type'] == 1) $model = 'App\\Models\\Books\\Book';            elseif ($item['item_type'] == 2) $model = 'App\\Models\\Videos\\VideoPlaylist';            elseif ($item['item_type'] == 3) $model = 'App\\KnowBase';            elseif ($item['item_type'] == 4) $model = 'App\\iSpring';            $elements[] = [                'item_id' => $item['item_id'],                'item_type' => $model,            ];            $ci = CourseItemV2::query()                ->where('course_id', $courseId)                ->where('item_type', $model)                ->where('item_id', $item['item_id'])                ->first();            $arr = [                'course_id' => $courseId,                'item_id' => $item['item_id'],                'item_type' => $model,                'name' => $item['name'],                'order' => $item['order'],                'duration' => $item['duration'],            ];            if ($ci) {                $ci->update($arr);            } else {                CourseItemV2::query()->create($arr);            }        }        return $elements;    }    public function saveCourseTargets($courseId, $targets): void    {        // who starts the course        CourseTargetV2::query()->where('course_id', $courseId)->delete();        // if there is one badge with 'ALL' name        if (count($targets) == 1 && $targets[0]['target_type'] == 0) {            CourseTargetV2::query()->create([                'course_id' => $courseId,                'target_type' => 0,                'target_id' => 0,            ]);        } else {            // no badge            foreach ($targets as $target) {                if ($target['target_type'] == CourseV2::USER_TARGET) $model = 'App\\User';                if ($target['target_type'] == CourseV2::POSITION_TARGET) $model = 'App\\Position';                if ($target['target_type'] == CourseV2::GROUP_TARGET) $model = 'App\\ProfileGroup';                CourseTargetV2::query()->create([                    'course_id' => $courseId,                    'target_id' => $target['target_id'],                    'target_type' => $model,                ]);            }        }    }}