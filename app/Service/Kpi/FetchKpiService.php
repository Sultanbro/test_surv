<?phpnamespace App\Service\Kpi;use Illuminate\Database\Eloquent\Relations\HasMany;use Illuminate\Database\Eloquent\Relations\MorphMany;use Illuminate\Database\Eloquent\Builder;use App\Models\Analytics\Activity;use Illuminate\Support\Collection;use App\Classes\Helpers\Currency;use Illuminate\Http\Request;use App\Models\Kpi\Kpi;use App\ProfileGroup;use Carbon\Carbon;use App\Position;use App\User;use Exception;class FetchKpiService{    protected User $user;    protected int $position_id;    protected int $user_id;    protected string $currency;    protected Carbon $date;    protected array $activeGroups;    protected array $droppedGroups;    /**     * @throws Exception     */    public function fetchKpisWithCurrency(Request $request, bool $limitForProfile = true): array    {        $this->validateRequest($request);        $filters = $request->get('filters');        $this->date = $this->parseDateFromFilters($filters);        $this->user = $this->fetchUser($filters['user_id'] ?? 0);        $this->position_id = $this->getPositionId($this->user);        $this->user_id = $this->user->id;        $this->currency = $this->user->currency;        $this->activeGroups = $this->user->inGroups()->pluck('id')->toArray();        $this->droppedGroups = $this->user->droppedGroups($this->date);        $firedGroups = $this->user->firedGroups();        $groups = array_merge($this->activeGroups, $this->droppedGroups, $firedGroups);        $kpis = $this->fetchAndPrepareKpis($groups);        $kpis = $this->filterAndPrepareKpisCollection($kpis, $limitForProfile);        $currency_rate = (float)(Currency::rates()[$this->currency] ?? 0.00001);        return [            'items' => $kpis,            'activities' => Activity::query()->get(),            'groups' => ProfileGroup::query()->get()->pluck('name', 'id')->toArray(),            'user_id' => auth()->user() ? auth()->id() : 1,            'read' => $kpis->contains(fn($k) => in_array($this->user->id, $k->read_by ?? [])),            'currency' => $this->currency,            'currency_rate' => $currency_rate        ];    }    private function validateRequest(Request $request): void    {        $request->validate([            'filters.user_id' => 'required|int',        ]);    }    private function parseDateFromFilters(array $filters)    {        if (isset($filters['data_from']['year'], $filters['data_from']['month'])) {            return Carbon::createFromDate($filters['data_from']['year'], $filters['data_from']['month'], 1);        }        return Carbon::now()->setTimezone('Asia/Almaty')->startOfMonth();    }    private function getPositionId(User $user)    {        if (!$user->profile_histories_latest) {            $position_id = $user->position_id;        } else {            $payload = json_decode($user->profile_histories_latest?->payload, true) ?? [];            $position_id = $payload['position_id'];        }        return $position_id;    }    /**     * @throws Exception     */    private function fetchUser(int $userId)    {        $user = User::withTrashed()->with([            'groups',            'profile_histories_latest' => function ($query) {                $last_date = $this->date->endOfMonth()->format('Y-m-d');                $query->whereDate('created_at', '<=', $last_date);            },        ])->find($userId);        return $user ?: throw new Exception('User not found');    }    private function fetchAndPrepareKpis($groups)    {        $last_date = Carbon::parse($this->date)->endOfMonth()->format('Y-m-d');        return Kpi::query()            ->with($this->getWithRelations($this->date))            ->withCount($this->getWithCounts($this->user->id, $this->activeGroups, $this->droppedGroups, $this->position_id))            ->where(function ($query) use ($groups) {                $this->applyTargetFilters($query, $this->user->id, $groups, $this->position_id);            })            ->whereDate('created_at', '<=', $last_date)            ->where(                fn($query) => $query->whereNull('deleted_at')->orWhereDate('deleted_at', '>', $last_date)            )            ->whereNot(function (Builder $query) use ($last_date) {                $query                    ->where('targetable_type', 'App\\User')                    ->whereHas('user', function (Builder $query) use ($last_date) {                        $query->where('deleted_at', '<', $last_date);                    });            })            ->get();    }    private function getWithRelations($date): array    {        $last_date = Carbon::parse($date)->endOfMonth()->format('Y-m-d');        return [            'histories_latest' => function ($query) use ($date) {                $query->whereYear('created_at', $date->year);                $query->whereMonth('created_at', $date->month);            },            'items.histories_latest' => function ($query) use ($date) {                $query->whereYear('created_at', $date->year);                $query->whereMonth('created_at', $date->month);            },            'items' => function (HasMany $query) use ($last_date, $date) {                $query->with(['histories' => function (MorphMany $query) use ($last_date, $date) {                    $query->whereYear('created_at', $date->year);                    $query->whereMonth('created_at', $date->month);                }]);                $query->where(function (Builder $query) use ($last_date) {                    $query->whereNull('deleted_at');                    $query->orWhere('deleted_at', '>', $last_date);                });            },            'items.activity',            'groups',            'users',            'positions'        ];    }    private function getWithCounts($user_id, $activeGroups, $droppedGroups, $position_id): array    {        return [            'users as has_user' => function ($q) use ($user_id) {                $q->where('kpiables.kpiable_id', $user_id)                    ->where('kpiables.kpiable_type', User::class);            },            'groups as has_group' => function ($q) use ($activeGroups) {                $q->whereIn('kpiables.kpiable_id', $activeGroups)                    ->where('kpiables.kpiable_type', ProfileGroup::class);            },            'groups as has_dropped_group' => function ($q) use ($droppedGroups) {                $q->whereIn('kpiables.kpiable_id', $droppedGroups)                    ->where('kpiables.kpiable_type', ProfileGroup::class);            },            'positions as has_position' => function ($q) use ($position_id) {                $q->where('kpiables.kpiable_id', $position_id)                    ->where('kpiables.kpiable_type', Position::class);            }        ];    }    public function applyTargetFilters($query, $user_id, $groups, $position_id) {        $query->whereHas('targetable', function ($q) use ($position_id, $groups, $user_id) {            if ($q->getModel() instanceof User) {                $q->where('targetable_id', $user_id)                    ->where('targetable_type', User::class);            } elseif ($q->getModel() instanceof Position) {                $q->where('targetable_id', $position_id)                    ->where('targetable_type', Position::class);            } elseif ($q->getModel() instanceof ProfileGroup) {                $q->whereIn('targetable_id', $groups)                    ->where('targetable_type', ProfileGroup::class);            }        })            ->orWhereHas('users', function ($q) use ($user_id) {                $q->where('kpiables.kpiable_id', $user_id)                    ->where('kpiables.kpiable_type', User::class);            })            ->orWhereHas('groups', function ($q) use ($groups) {                $q->whereIn('kpiables.kpiable_id', $groups)                    ->where('kpiables.kpiable_type', ProfileGroup::class);            })            ->orWhereHas('positions', function ($q) use ($position_id) {                $q->where('kpiables.kpiable_id', $position_id)                    ->where('kpiables.kpiable_type', Position::class);            });    }    private function filterAndPrepareKpisCollection(Collection $kpis, $limitForProfile): Collection    {        $kpis = $kpis->filter(function ($kpi) {            // This code supports old and new relations            // set priority and target for fetch only latest one or dropped group kpi (LEARN which kpis should be seen in profile!)            if ($kpi->has_user > 0) {                $kpi->priority = 1;                $kpi->targetable_id = $this->user_id;                $kpi->targetable_type = 'App\User';                $kpi->targetable = $kpi->users->where('id', $this->user_id)->first();            } elseif ($kpi->has_position > 0) {                $kpi->priority = 2;                $kpi->targetable_id = $this->position_id;                $kpi->targetable_type = 'App\Position';                $kpi->targetable = $kpi->positions->where('id', $this->position_id)->first();            } elseif ($kpi->has_group > 0) {                $kpi->priority = 3;                $kpi->targetable_type = 'App\ProfileGroup';                $kpi->targetable = $kpi->groups->whereIn('id', $this->activeGroups)->first();                $kpi->targetable_id = $kpi->targetable->id;            } elseif ($kpi->has_dropped_group > 0) {                $kpi->priority = 4;                $kpi->targetable_type = 'App\ProfileGroup';                $kpi->targetable = $kpi->groups->whereIn('id', $this->droppedGroups)->first();                $kpi->targetable_id = $kpi->targetable->id;            } elseif ($kpi->targetable) {                // This is for previous relation!                if ($kpi->targetable_type == 'App\User') {                    $kpi->priority = 1;                    $kpi->targetable_id = $this->user_id;                } elseif ($kpi->targetable_type == 'App\Position') {                    $kpi->priority = 2;                    $kpi->targetable_id = $this->position_id;                } elseif ($kpi->targetable_type == 'App\ProfileGroup') {                    $kpi->targetable_id = $kpi->targetable->id;                    if (in_array($kpi->targetable_id, $this->activeGroups)) {                        $kpi->priority = 3;                    } else {                        // for dropped group                        $kpi->priority = 4;                    }                }            }            $history = $kpi->histories_latest;            if (!$history) {                return true;            }            $payload = json_decode($history->payload, true) ?? [];            return !isset($payload['is_active']) || $payload['is_active'] != 0;        });        if ($limitForProfile && $kpis->count() > 1) {            $currentKpi = $kpis->sortBy('priority')->first();            if ($currentKpi->priority != 4) {                $droppedGroupKpis = $kpis->where('priority', 4);// get dropped group kpis                $kpis = $droppedGroupKpis->push($currentKpi)->sortBy('priority')->values();            } else {                $kpis = collect([$currentKpi]);            }        }        foreach ($kpis as $kpi) {            $kpi->kpi_items = [];            // remove items if it's not in history            if ($kpi->histories_latest) {                $payload = json_decode($kpi->histories_latest->payload, true);                if (isset($payload['children'])) {                    $kpi->items = $kpi->items->whereIn('id', $payload['children']);                }                $kpi->completed_80 = $payload['completed_80'];                $kpi->completed_100 = $payload['completed_100'];            }            unset($kpi->users);            $kpi->users = $this->getUsersForKpi($kpi, $this->date, $this->user_id);            $kpi_sum = 0;            foreach ($kpi->users as $user) {                $kpi_sum = $kpi_sum + $user['avg_percent'];            }            $kpi->avg = count($kpi->users) > 0 ? round($kpi_sum / count($kpi->users), 2) : 0; //AVG percent of all KPI of all USERS in GROUP            $kpi['dropped'] = in_array($kpi->targetable_id, $this->droppedGroups) ?? true;        }        return $kpis;    }}