<?phpnamespace App\Service\Tax;use Illuminate\Support\Collection;class UserTaxService{    public static function calculateTax(Collection $taxItems, $earning, $method)    {        $deductedEarning = $earning;        $sum = 0;        if ($method == 'old') $taxItems = $taxItems->sortBy('end_subtraction');        elseif ($method == 'new') {            foreach ($taxItems as $item) {                if ($item->histories_latest) {                    $data = json_decode($item->histories_latest->payload, true);                    $item->name = $data['name'];                    $item->value = $data['value'];                    $item->is_percent = $data['is_percent'];                    if (array_key_exists('is_deduction', $data)) $item->is_deduction = $data['is_deduction'];                    $item->tax_group_id = $data['tax_group_id'];                    $item->end_subtraction = $data['end_subtraction'];                }            }            $taxItems = $taxItems->sortBy('order');        }        foreach ($taxItems as $item) {            if (!$item->value) continue;            if ($item->is_deduction) { // Vicheti                if ($item->end_subtraction == 0) {                    $deductedEarning -= $item->is_percent ? ( $deductedEarning * $item->value / 100 ) : $item->value;                } else {                    $deductedEarning -= $item->is_percent ? ( ($deductedEarning - $sum) * $item->value / 100 ) : ($item->value + $sum);                }                if ($deductedEarning < 0) $deductedEarning = 0;            }            else {                if ($item->end_subtraction == 0) {                    $sum += $item->is_percent ? round($deductedEarning * $item->value / 100) : $item->value;                } else {                    $sum += $item->is_percent ? round(($deductedEarning - $sum) * $item->value / 100) : $item->value;                }            }        }        return round($sum); // Sum taxes    }}