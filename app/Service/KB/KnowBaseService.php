<?phpnamespace App\Service\KB;use App\KnowBase;class KnowBaseService{    public static function getAll()    {        return KnowBase::with([            'onlyChildren:id,parent_id,is_category,order,title'        ])->select('id', 'parent_id', 'is_category', 'order', 'title')->get();    }    public function buildTree()    {        $items = self::getAll();        $itemsById = $items->sortBy('order')->keyBy('id');        foreach ($items as $item) {            if (!is_null($item->parent_id) && isset($itemsById[$item->parent_id])) {                $parent = $itemsById[$item->parent_id];                $parent->onlyChildren = $parent->onlyChildren ?? collect();                $index = $parent->onlyChildren->search(function ($child) use ($item) {                    return $child->id === $item->id;                });                if ($index !== false) {                    $parent->onlyChildren = $parent->onlyChildren->filter(function ($child) use ($item) {                        return $child->id !== $item->id; // Remove the existing item                    })->values();                }                $parent->onlyChildren->push($item);                $parent->onlyChildren = $parent->onlyChildren->sortBy('order');            }        }        $tree = $items->sortBy('order')->filter(function ($item) {            return is_null($item->parent_id); // Filter root nodes        })->values();        return $tree;    }    function filterTree($tree, $userId, &$accessibleParents = null) {        if (is_null($accessibleParents)) {            $accessibleParents = collect();        }        foreach ($tree as $key => $node) {            if (!$this->hasAccess($userId, $node->id)) {                if (!empty($node->children)) {                    $this->filterTree($node->children, $userId, $accessibleParents);                }            } else {                if (!empty($node->children)) {                    $node->children = $this->filterTree($node->children, $userId)->sortBy('order');                }                $accessibleParents->push($node);            }        }        return $accessibleParents->sortBy('order')->values();    }    function hasAccess($userId, $itemId) {        // Implement your access logic here        return true; // Example: Always return true for simplification    }}