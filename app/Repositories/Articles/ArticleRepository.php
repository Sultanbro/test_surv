<?phpnamespace App\Repositories\Articles;use App\Entities\DataTransferObjects\News\ArticleStoreDTO;use App\Models\Article\Article;use App\Models\Article\PollAnswer;use App\Models\Article\PollQuestion;use App\Models\File\File;use App\Repositories\Interfaces\Article\ArticleRepositoryInterface;use App\User;class ArticleRepository implements ArticleRepositoryInterface{    public function store(ArticleStoreDTO $dto): Article    {        $article = Article::create($dto->toArray());        foreach ($dto->getQuestions() as $question) {            /** @var PollQuestion $questionModel */            $questionModel = PollQuestion::query()->create([                'article_id' => $article->id,                'multi_answer' => $question['multi_answer'],                'question' => $question['question']            ]);            foreach ($question['answers'] as $answer) {                PollAnswer::query()->create([                    'article_id' => $article->id,                    'question_id' => $questionModel->id,                    'answer' => $answer['answer'],                    'order' => $answer['order']                ]);            }        }        $article->files()->saveMany(File::whereIn('id', $dto->getFiles())->get());        return $article;    }    public function update(Article $article, ArticleStoreDTO $dto): Article    {        $article->update($dto->toArray());        // Delete removed questions from lits        $deletedQuestions = $article->questions()->whereNotIn('id', array_column($dto->getQuestions(), 'id'))->get();        foreach ($deletedQuestions as $deletedQuestion) {            $deletedQuestion->delete();        }        // Update changed questions        foreach ($dto->getQuestions() as $question) {            PollQuestion::query()->updateOrCreate(['id' => $question['id'] ?? 0], [                'multi_answer' => $question['multi_answer'],                'question' => $question['question']            ]);            foreach ($question['answers'] as $answer) {                PollAnswer::query()->updateOrCreate(['id' => $answer['id']], [                    'answer' => $answer['answer'],                    'order' => $answer['order']                ]);            }        }        $article->files()->whereNotIn(            'id',            $dto->getFiles(),        )->delete();        $article->files()->saveMany(File::whereIn('id', $dto->getFiles())->get());        return $article;    }    public function delete($id)    {        return Article::where('id', $id)->delete();    }    public function likeExists(Article $article, $userId): bool    {        return $article->likes()->where('user_id', $userId)->exists();    }    public function likesCount(Article $article): int    {        return $article->likes()->count();    }    public function viewsCount(Article $article): int    {        return $article->views()->count();    }    public function commentsCount(Article $article): int    {        return $article->comments()->count();    }    public function isFavourite(Article $article, User $user): bool    {        return $user->favouriteArticles()->where('article_id', $article->id)->exists();    }    public function isPinned(Article $article, User $user): bool    {        return $user->pinnedArticles()->where('article_id', $article->id)->exists();    }}