<?php

namespace Tests\Feature;

use App\Events\Event;
use App\Models\Kpi\Bonus;
use App\User;
use Illuminate\Foundation\Testing\WithFaker;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Faker\Factory as Faker;

class BonusTest extends TestCase
{
    protected $header;

    protected $data;

    protected $user;

    public function setUp(): void
    {
        $this->header = [
            'Content-Type' => 'application/vnd.api+json',
            'Accept'       => 'application/vnd.api+json',
        ];

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * Получить бонусы.
     */
     public function testGetBonuses(): void
     {
         $this->withoutExceptionHandling();
         $this->withoutMiddleware();
         $auth = User::factory()->create();

         $response = $this->actingAs($auth)->postJson(route('bonus.get'));

         $response->assertStatus(Response::HTTP_OK)->assertJsonStructure([
             'bonuses',
             'activities',
             'groups'
         ]);

         $auth->delete();
     }

    public function testSaveBonus()
    {
        $this->withoutExceptionHandling(); 
        $this->withoutMiddleware();
        $auth  = User::factory()->create();
        $faker = Faker::create();

        $targetableId = $faker->randomDigit;

        $response = $this->actingAs($auth)->postJson(route('bonus.save', [
            'targetable_id'     => $targetableId,
            'targetable_type'   => array_random([1, 2, 3]),
            'title'             => $this->putIntoArray(3, 'word'),
            'sum'               => $this->putIntoArray(3, 'numberBetween', 100, 1000),
            'group_id'          => $targetableId,
            'activity_id'       => $this->putIntoArray(3, 'numberBetween', 1, 100),
            'unit'              => $this->putIntoArray(3, 'word'),
            'quantity'          => $this->putIntoArray(3, 'randomDigit'),
            'daypart'           => $this->putIntoArray(3, 'numberBetween', 0, 2),
            'text'              => $this->putIntoArray(3, 'word')

        ]), $this->header);

        $response->assertStatus(Response::HTTP_OK)->assertSuccessful()->assertJsonStructure([
            'bonus'
        ]);

        $auth->delete();
    }

    public function testUpdateBonus()
    {
        $this->withoutExceptionHandling();
        $this->withoutMiddleware();
        Event::dispatch();

        $faker = Faker::create();
        $auth  = User::factory()->create();
        $bonus = Bonus::factory()->create();

        $targetableId = $faker->randomDigit;
        $response = $this->actingAs($auth)->putJson(route('bonus.update', [
            'id'            => $bonus->id,
            'targetable_id' => $targetableId,
            'targetable_type' => array_random([
                'App\User',
                'App\ProfileGroup',
                'App\Position'
            ]),
            'title' => $faker->title,
            'sum'   => $faker->randomDigit,
            'group_id'    => $targetableId,
            'activity_id' => $faker->numberBetween(0, 100),
            'quantity'    => $faker->randomDigit

        ]), $this->header);

        $auth->delete();
        $bonus->delete();

        $response->assertStatus(Response::HTTP_OK)->assertSuccessful();
    }

    public function testDeleteBonus()
    {
        $this->withoutExceptionHandling();
        $this->withoutMiddleware();
        $bonus = Bonus::factory()->create();

        $response = $this->deleteJson(route('bonus.delete', [
            'id' => $bonus->id
        ]), $this->header);

        $response->assertStatus(200)->assertSuccessful();
    }

    /**
     * @param $size
     * @param $methodName
     * @param $parameter1
     * @param $parameter2
     * @return array
     */
    private function putIntoArray($size, $methodName, $parameter1 = null, $parameter2 = null): array
    {
        $data = [];
        $faker = Faker::create();
        for ($i = 0; $i < $size; $i++) {

            if ($parameter1 != null || $parameter2 != null){
                $data[] = $faker->{$methodName}($parameter1, $parameter2);
            }else {
                $data[] = $faker->{$methodName};
            }
        }

        return $data;
    }
}
