<?php

namespace Tests\Feature;

use App\Events\Event;
use App\Models\Analytics\Activity;
use App\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Faker\Factory as Faker;
use function Symfony\Component\Translation\t;

class ActivityTest extends TestCase
{
    use WithFaker;

    protected $data;

    protected $header;

    public function setUp(): void
    {
        $faker = Faker::create();

        $this->data = [
            'name'       => $faker->word,
            'group_id'   => $faker->randomDigit,
            'daily_plan' => $faker->numberBetween(0,300),
            'plan_unit'  => array_random(['minutes', 'percent', 'less_avg', 'less_sum']),
            'unit'      => array_random(['%', 'мин']),
            'plan_type' => array_random(['sum', 'avg']),
            'type'      => array_random(['default', 'quality']),
            'weekdays'  => array_random([6, 7]),
            'order'     => $faker->randomDigit,
            'editable'  => $faker->numberBetween(0, 1),
            'ud_ves'    => $faker->numberBetween(0, 100),
            'data'      => '[]',
            'method'    => array_random([1,2,3,4,5,6]),
            'share'     => $faker->numberBetween(0, 1),
            'source'    => $faker->numberBetween(0, 1),
            'view'      => $faker->numberBetween(0, 1)
        ];

        $this->header = [
            'Content-Type' => 'application/vnd.api+json',
            'Accept'       => 'application/vnd.api+json',
        ];

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * Получить активность
     */
     public function testGetActivities(): void
     {
         $this->withoutExceptionHandling();
         $this->withoutMiddleware();

        $response = $this->postJson('activities/get', $this->header);

        $response->assertStatus(Response::HTTP_OK);

        $response->assertJsonStructure([
            'items',
            'groups'
        ]);
     }

    public function testSaveActivity()
    {
        $this->withoutExceptionHandling();
        $this->withoutMiddleware();
        $auth = User::factory()->create();

        $response = $this->actingAs($auth)->postJson(route('activities.save', $this->data), $this->header);

        $response->assertStatus(Response::HTTP_OK)->assertSee([
            'indicator'
        ]);
    }

    public function testUpdateActivity()
    {
        $this->withoutExceptionHandling();
        $this->withoutMiddleware();
        $auth = User::factory()->create();
        Event::dispatch();

        $this->data['id'] = 144;

        $response = $this->actingAs($auth)->putJson(route('activities.update'), $this->data, $this->header);

        $response->assertStatus(200)->assertSuccessful();
    }

    public function testDeleteActivity()
    {
        $this->withoutExceptionHandling();
        $this->withoutMiddleware();

        $auth = User::factory()->create();

        $this->data['created_by'] = $auth->id;
        $this->data['updated_by'] = $auth->id;

        $activity = Activity::query()->create($this->data);

        $response = $this->actingAs($auth)->deleteJson(route('activities.delete', [
            'id' => $activity->id
        ]));
        $response->assertStatus(200)->assertSuccessful();
    }
}
